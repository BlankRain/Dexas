worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    # 设置默认 lua 搜索路径，添加 lua 路径
    lua_package_path 'lua/?.lua;/lualu/?.lua;;';

    # 对于开发研究，可以对代码 cache 进行关闭，这样不必每次都重新加载 nginx。
    lua_code_cache off;

    server {
        listen 8080;
	server_name dexas.com;
	set  $template_location /templates;
        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/dexas/([-_a-zA-Z0-9/]+).html {

	    # 准入阶段完成参数验证
            access_by_lua_file  lualu/access_check.lua;

            #内容生成阶段
            content_by_lua_file lualu/$1.lua;
        }

	location /templates {
	      internal;
               alias views;
	        }    
    }


    server {
        listen 8080;
	server_name *.dexas;
        location / {
            resolver 8.8.4.4;  # use Google's open DNS server

            set $target '';
            access_by_lua '
                local key = ngx.var.http_host
		if not key then
                    ngx.log(ngx.ERR, "no domain found")
                    return ngx.exit(400)
                end
		key=string.gsub(key,":"..ngx.var.server_port,"")
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 second

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end
	
                local host, err = red:get(key)
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis key: ", err)
                    return ngx.exit(500)
                end

                if host == ngx.null then
                    ngx.log(ngx.ERR,"lalalla",ngx.var.server_port)
		    ngx.log(ngx.ERR, "no host found for key ", key)
                    return ngx.exit(400)
                end

                ngx.var.target = host
            ';

            proxy_pass http://$target;
        }
    }
}
